<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--引用外部配置文件-->
    <properties resource="dataSource.properties"></properties>

    <settings>
        <!--驼峰命名-->
        <setting name="mapUnderscoreToCamelCase" value="true" />
        <setting name="logImpl" value="STDOUT_LOGGING" />
        <!--延迟加载，按需加载-->
        <setting name="lazyLoadingEnabled" value="true"></setting>
        <!--开启全局二级缓存的配置-->
        <setting name="cacheEnabled" value="true"></setting>
    </settings>
    <typeAliases>
        <typeAlias type="com.xu.mybatis.bean.Employee" alias="employee"></typeAlias>
        <!--每一个在包com.xu.mybatis 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名-->
        <!--<package name="com.xu.mybatis"/>-->
    </typeAliases>
    <!--定义类型处理器-->
    <typeHandlers>
        <!--配置我们自定义的类型处理器-->
        <typeHandler handler="com.xu.mybatis.handler.MyEnumSatusTypeHandler" javaType="com.xu.mybatis.bean.EmployeeStatus"/>
    </typeHandlers>
    <!--<plugins>-->
        <!--<plugin interceptor="com.xu.mybatis.plugins.ExamplePlugin">-->
            <!--<property name="someProperty" value="100"/>-->
        <!--</plugin>-->
    <!--</plugins>-->
    <plugins>
        <plugin interceptor="com.xu.mybatis.plugins.MyfirstPlugin">
            <property name="username" value="root"></property>
            <property name="password" value="123456"></property>
        </plugin>
        <plugin interceptor="com.github.pagehelper.PageInterceptor">
        <!-- 使用下面的方式配置参数，后面会有所有的参数介绍 -->
        <property name="param1" value="value1"/>
    </plugin>

    </plugins>

    <!--默认的环境 ID（比如:default="development"）。
每个 environment 元素定义的环境 ID（比如:id="development"）。
事务管理器的配置（比如:type="JDBC"）。
数据源的配置（比如:type="POOLED"）。-->
    <environments default="development">
        <environment id="development">
            <!--在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：
            JDBC – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。
            MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。
            注意：如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器， 因为 Spring 模块会使用自带的管理器来覆盖前面的配置。-->
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--指定数据库的多个厂商-->
    <databaseIdProvider type="DB_VENDOR">
        <property name="MySQL" value="mysql"></property>
        <property name="Oracle" value="oracle"></property>
    </databaseIdProvider>
    <!--去哪里找sql映射语句

    2. 使用完全限定资源定位符（URL）
    3.使用映射器接口实现类的完全限定类名
    4.将包内的映射器接口实现全部注册为映射器
    -->
    <mappers>
        <!--1.使用相对于类路径的资源引用-->
        <mapper resource="mapper/EmployeeMapper.xml"></mapper>
        <!-- 3.使用映射器接口实现类的完全限定类名
                   1)有sql映射文件，必须把这个文件放在与mapper类的同一个目录下,并且sql映射文件和mapper类名相同
                   2）没有sql映射文件，所有sql都写在注解上。
        -->
        <!--<mapper class="com.xu.mybatis.mapperxml.mapper.EmployeeMapper"></mapper>-->
        <!--<package name="com.xu.mybatis"></package>-->

        <mapper resource="mapper/EmployeeResultMapMapper.xml"></mapper>
        <mapper resource="mapper/DepartmentMapper.xml"></mapper>
        <mapper resource="mapper/EmployeeDynamicSqlMapper.xml"></mapper>
    </mappers>
</configuration>